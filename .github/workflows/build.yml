name: Build Apache TVM

on:
  push:
    branches: 'main'
  schedule:
    - cron: "* 17 * * *"

permissions:
  contents: write

env:
  CUDA_VERSION: 12.9.0

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    outputs:
      hash: ${{ steps.hash.outputs.HASH }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
      - name: Retrieve hash
        id: hash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Install cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh all
          sudo apt update && sudo apt install -y gcc libtinfo-dev zlib1g-dev \
            build-essential libedit-dev libxml2-dev libpolly-20-dev
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools
      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='llvm-config --link-static'; -DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON" \
            -C cmake.define.CMAKE_C_COMPILER_LAUNCHER=ccache \
            -C cmake.define.CMAKE_CXX_COMPILER_LAUNCHER=ccache
          uv build --wheel 3rdparty/tvm-ffi/
      - name: Check if TVM can be imported
        run: |
          uv pip install dist/tvm*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          python -c "import tvm; print(tvm.__version__)"
      - uses: softprops/action-gh-release@v2.3.3
        with:
          files: |
            "dist/tvm-*.whl"
            "3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl"
          tag_name: nightly

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
      - name: Retrieve hash
        id: hash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          brew install llvm
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools
      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='$(brew --prefix llvm)/bin/llvm-config --link-static'; -DUSE_MLIR=ON" \
            -C cmake.define.CMAKE_C_COMPILER_LAUNCHER=ccache \
            -C cmake.define.CMAKE_CXX_COMPILER_LAUNCHER=ccache
          uv build --wheel 3rdparty/tvm-ffi/
      - name: Check if TVM can be imported
        run: |
          uv pip install dist/tvm*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          python -c "import tvm; print(tvm.__version__)"
      - uses: softprops/action-gh-release@v2.3.3
        with:
          files: |
            "dist/tvm-*.whl"
            "3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl"
          tag_name: nightly

  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly
          tag_name: nightly
          body: |
            tvm: ${{ needs.build-linux.outputs.hash }}
            CUDA: ${{ env.CUDA_VERSION }} (only for Linux build)

name: Build Apache TVM

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 8 * * *"    # 17:00 JST
  workflow_dispatch:

concurrency:
  group: tvm-nightly-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CUDA_VERSION: 12.9.0
  ZSTD_VERSION: 1.5.6
  TOOLROOT: ${{ github.workspace }}/toolroot
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  prepare:
    name: Pin TVM commit & meta
    runs-on: ubuntu-24.04
    outputs:
      tvm_sha: ${{ steps.pin.outputs.TVM_SHA }}
      date_jst: ${{ steps.meta.outputs.DATE_JST }}
      date_compact: ${{ steps.meta.outputs.DATE_JST_COMPACT }}
      short_sha: ${{ steps.short.outputs.SHORT_SHA }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: apache/tvm
          ref: main
          fetch-depth: 1

      - name: Pin SHA
        id: pin
        run: echo "TVM_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compute SHORT_SHA
        id: short
        run: |
          SHA=$(git rev-parse HEAD)
          echo "SHORT_SHA=${SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Compute JST Date
        id: meta
        run: |
          echo "DATE_JST=$(TZ=Asia/Tokyo date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "DATE_JST_COMPACT=$(TZ=Asia/Tokyo date +%Y%m%d)" >> $GITHUB_OUTPUT

  build:
    name: Build & Test (${{ matrix.os }} py${{ matrix.python }})
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ['3.10','3.11','3.12','3.13','3.14']
        include:
          # Ubuntu
          - os: ubuntu-latest
            cuda: true
            cmake_extra: "-DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON; -DUSE_LLVM='llvm-config-18 --link-static'; -DLLVM_DIR=$(llvm-config-18 --cmakedir)"
          # macOS
          - os: macos-latest
            cuda: false
            cmake_extra: "-DUSE_MLIR=ON; -DUSE_METAL=ON; -DUSE_LLVM='$(brew --prefix llvm)/bin/llvm-config --link-static'"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: apache/tvm
          ref: ${{ needs.prepare.outputs.tvm_sha }}
          submodules: recursive

      - uses: astral-sh/setup-uv@v6
        with:
          activate-environment: "true"

      - uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('pyproject.toml','**/pyproject.toml','uv.lock','**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python }}-

      - uses: hendrikmuhs/ccache-action@v1.2.19

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install toolchain / deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            gcc libtinfo-dev zlib1g-dev build-essential \
            libedit-dev libxml2-dev llvm-18-dev llvm-18-tools clang-18 libpolly-18-dev
          source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools pytest

      - name: Install toolchain / deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install llvm
          source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools pytest
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - uses: Jimver/cuda-toolkit@v0.2.27
        if: matrix.cuda
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network

      # まずパッケージ版zstdを試し、必要な場合のみPIC staticをcache付きでビルド
      - name: Try system zstd (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y libzstd-dev || true

      - uses: actions/cache@v4
        id: zstd-cache
        with:
          path: ${{ env.TOOLROOT }}
          key: zstd-${{ runner.os }}-${{ env.ZSTD_VERSION }}

      - name: Build zstd (PIC static) if missing (Linux)
        if: runner.os == 'Linux' && steps.zstd-cache.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          mkdir -p "${TOOLROOT}"
          git clone --depth 1 --branch v${ZSTD_VERSION} https://github.com/facebook/zstd.git
          make -C zstd clean
          make -C zstd ZSTD_LEGACY_SUPPORT=0 CFLAGS="-O2 -fPIC" -j"$(/usr/bin/nproc || sysctl -n hw.ncpu || echo 2)"
          make -C zstd PREFIX="${TOOLROOT}" install
          echo "${TOOLROOT}/lib" | sudo tee /etc/ld.so.conf.d/zz-local.conf >/dev/null || true
          (command -v ldconfig && sudo ldconfig) || true

      - name: Build wheels
        env:
          # zstd prefix を優先
          LIBRARY_PATH: ${{ env.TOOLROOT }}/lib:${{ env.LIBRARY_PATH }}
          CMAKE_LIBRARY_PATH: ${{ env.TOOLROOT }}/lib:${{ env.CMAKE_LIBRARY_PATH }}
          PKG_CONFIG_PATH: ${{ env.TOOLROOT }}/lib/pkgconfig:${{ env.PKG_CONFIG_PATH }}
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; ${{ matrix.cmake_extra }}"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Test wheels
        env:
          TVM_TEST_TARGETS: "llvm"
        run: |
          ABS_TESTS="$PWD/tests/python/all-platform-minimal-test"
          uv pip install 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl dist/tvm-*.whl
          mkdir -p ../tmp && cd ../tmp
          uv run python -c "import tvm; print(tvm.__file__); print(tvm.__version__);print(tvm.support.describe())"
          uv run pytest -v "$ABS_TESTS"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          if-no-files-found: error

  release:
    name: Create GitHub Releases
    needs: [prepare, build]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Flatten & dedupe wheels
        run: |
          mkdir -p upload
          while IFS= read -r -d '' f; do
            bn="$(basename "$f")"
            [[ -e "upload/$bn" ]] && { echo "skip duplicate: $bn"; continue; }
            cp "$f" "upload/$bn"
          done < <(find all-wheels -type f -name '*.whl' -print0)
          ls -al upload

      - name: Release (dated nightly)
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (${{ needs.prepare.outputs.date_jst }}) [tvm ${{ needs.prepare.outputs.short_sha }}]
          tag_name: nightly-${{ needs.prepare.outputs.date_compact }}-tvm-${{ needs.prepare.outputs.short_sha }}
          body: |
            tvm: ${{ needs.prepare.outputs.tvm_sha }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Built (JST): ${{ needs.prepare.outputs.date_jst }}
          files: upload/*
          prerelease: true
          fail_on_unmatched_files: true

      - name: Delete nightly tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh gh release delete nightly --cleanup-tag --yes

      - name: Release (latest nightly)
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (latest)
          tag_name: nightly
          body: |
            tvm: ${{ needs.prepare.outputs.tvm_sha }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Latest build (JST): ${{ needs.prepare.outputs.date_jst }}
          files: upload/*
          prerelease: true
          fail_on_unmatched_files: true

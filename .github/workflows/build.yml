name: Build Apache TVM

on:
  push:
    branches: 'main'
  schedule:
    - cron: "* 17 * * *"

permissions:
  contents: write

env:
  CUDA_VERSION: 12.9.0

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    outputs:
      hash: ${{ steps.hash.outputs.HASH }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com

      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19

      - name: Retrieve hash
        id: hash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Install cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y gcc libtinfo-dev zlib1g-dev \
            build-essential libedit-dev libxml2-dev llvm-dev
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools

      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='llvm-config'; -DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Check if TVM can be imported
        run: |
          uv pip install dist/tvm-*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          uv run python -c "import tvm; print(tvm.__version__)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com

      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          brew install llvm
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools

      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='$(brew --prefix llvm)/bin/llvm-config --link-static'; -DUSE_MLIR=ON"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Check if TVM can be imported
        run: |
          uv pip install dist/tvm-*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          uv run python -c "import tvm; print(tvm.__version__)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Compute tag meta (JST date + short TVM hash)
        id: meta
        run: |
          TZ=Asia/Tokyo date +%Y-%m-%d > date_jst.txt
          TZ=Asia/Tokyo date +%Y%m%d   > date_jst_compact.txt
          HASH="${{ needs.build-linux.outputs.hash }}"
          echo "DATE_JST=$(cat date_jst.txt)" >> $GITHUB_OUTPUT
          echo "DATE_JST_COMPACT=$(cat date_jst_compact.txt)" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${HASH:0:8}" >> $GITHUB_OUTPUT
          echo "FULL_SHA=${HASH}" >> $GITHUB_OUTPUT

      # immutable tag: nightly-YYYYMMDD-tvm-<short>
      - name: Release immutable nightly (dated)
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (${% raw %}{{ steps.meta.outputs.DATE_JST }}{% endraw %}) [tvm ${% raw %}{{ steps.meta.outputs.SHORT_SHA }}{% endraw %}]
          tag_name: nightly-${% raw %}{{ steps.meta.outputs.DATE_JST_COMPACT }}{% endraw %}-tvm-${% raw %}{{ steps.meta.outputs.SHORT_SHA }}{% endraw %}
          body: |
            tvm: ${% raw %}{{ steps.meta.outputs.FULL_SHA }}{% endraw %}
            CUDA: ${% raw %}{{ env.CUDA_VERSION }}{% endraw %} (Linux only)
            Built (JST): ${% raw %}{{ steps.meta.outputs.DATE_JST }}{% endraw %}
          files: |
            all-wheels/**/* 
          prerelease: true
          fail_on_unmatched_files: true

      # nightly tag
      - name: Update moving "nightly" tag
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (latest)
          tag_name: nightly
          body: |
            tvm: ${% raw %}{{ steps.meta.outputs.FULL_SHA }}{% endraw %}
            CUDA: ${% raw %}{{ env.CUDA_VERSION }}{% endraw %} (Linux only)
            Latest build (JST): ${% raw %}{{ steps.meta.outputs.DATE_JST }}{% endraw %}
          files: |
            all-wheels/**/*
          prerelease: true
          fail_on_unmatched_files: true

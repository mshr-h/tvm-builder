name: Build Apache TVM

on:
  push:
    branches: 'main'
  schedule:
    - cron: "* 17 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CUDA_VERSION: 12.9.0

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      HASH: ${{ steps.tvm.outputs.HASH }}
      SHORT_SHA: ${{ steps.tvm.outputs.SHORT_SHA }}
      DATE_JST:  ${{ steps.date.outputs.DATE_JST }}
      DATE_JST_COMPACT: ${{ steps.date.outputs.DATE_JST_COMPACT }}
    steps:
      - uses: actions/github-script@v7
        id: tvm
        with:
          script: |
            const res = await github.rest.git.getRef({
              owner: 'apache',
              repo: 'tvm',
              ref: 'heads/main',
            });
            core.setOutput('HASH', res.object.sha);
            core.setOutput('SHORT_SHA', res.object.sha.substring(0,8));
      - id: date
        run: |
          echo "DATE_JST=$(TZ=Asia/Tokyo date +%F)" >> $GITHUB_OUTPUT
          echo "DATE_JST_COMPACT=$(TZ=Asia/Tokyo date +%Y%m%d)" >> $GITHUB_OUTPUT

  build-linux:
    needs: [meta]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
    outputs:
      hash: ${{ steps.hash.outputs.HASH }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          ref: ${{ needs.meta.outputs.HASH }}
          submodules: recursive
          github-server-url: https://github.com

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v6
        with:
          activate-environment: "true"

      - uses: hendrikmuhs/ccache-action@v1.2.19

      - uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y gcc libtinfo-dev zlib1g-dev \
            build-essential libedit-dev libxml2-dev llvm-18-dev llvm-18-tools clang-18 libpolly-18-dev
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools pytest

      - name: Build zstd (PIC static)
        run: |
          set -euxo pipefail
          git clone --depth 1 https://github.com/facebook/zstd.git
          make -C zstd clean
          make -C zstd ZSTD_LEGACY_SUPPORT=0 CFLAGS="-O2 -fPIC"
          sudo make -C zstd install PREFIX=/usr/local
          echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/zz-local.conf
          sudo ldconfig

      - name: Build python package
        env:
          LIBRARY_PATH: /usr/local/lib:${{ env.LIBRARY_PATH }}
          CMAKE_LIBRARY_PATH: /usr/local/lib:${{ env.CMAKE_LIBRARY_PATH }}
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig:${{ env.PKG_CONFIG_PATH }}
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='llvm-config-18 --link-static'; -DLLVM_DIR=$(llvm-config-18 --cmakedir); -DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Test TVM
        env:
          TVM_TEST_TARGETS: "llvm"
        run: |
          source .venv/bin/activate
          ABS_TESTS="$PWD/tests/python/all-platform-minimal-test"
          uv pip install 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl dist/tvm-*.whl
          cd ..; mkdir tmp; cd tmp;
          uv run python -c "import tvm; print(tvm.__file__); print(tvm.__version__); print(tvm.support.describe()); print(tvm.support.libinfo())"
          uv run pytest -v "$ABS_TESTS"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  build-macos:
    needs: [meta]
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          ref: ${{ needs.meta.outputs.HASH }}
          submodules: recursive
          github-server-url: https://github.com

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v6
        with:
          activate-environment: "true"

      - uses: hendrikmuhs/ccache-action@v1.2.19

      - name: Install dependencies
        run: |
          brew install llvm
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools pytest

      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='$(brew --prefix llvm)/bin/llvm-config --link-static'; -DUSE_MLIR=ON; -DUSE_METAL=ON;"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Test TVM
        env:
          TVM_TEST_TARGETS: "llvm"
        run: |
          source .venv/bin/activate
          ABS_TESTS="$PWD/tests/python/all-platform-minimal-test"
          uv pip install 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl dist/tvm-*.whl
          cd ..; mkdir tmp; cd tmp;
          uv run python -c "import tvm; print(tvm.__file__); print(tvm.__version__); print(tvm.support.describe()); print(tvm.support.libinfo())"
          uv run pytest -v "$ABS_TESTS"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  release:
    needs: [meta, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: upload
          merge-multiple: true

      - uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (${{ needs.meta.outputs.DATE_JST }}) [tvm ${{ needs.meta.outputs.SHORT_SHA }}]
          tag_name: nightly-${{ needs.meta.outputs.DATE_JST_COMPACT }}-tvm-${{ needs.meta.outputs.SHORT_SHA }}
          body: |
            tvm: ${{ needs.meta.outputs.HASH }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Built (JST): ${{ needs.meta.outputs.DATE_JST }}
          files: |
            upload/dist/*.whl
            upload/3rdparty/tvm-ffi/dist/*.whl
          prerelease: true
          fail_on_unmatched_files: true

      - name: Delete nightly tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete nightly --cleanup-tag --yes || true

      - uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (latest)
          tag_name: nightly
          body: |
            tvm: ${{ needs.meta.outputs.HASH }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Latest build (JST): ${{ needs.meta.outputs.DATE_JST }}
          files: |
            upload/dist/*.whl
            upload/3rdparty/tvm-ffi/dist/*.whl
          prerelease: true
          fail_on_unmatched_files: true

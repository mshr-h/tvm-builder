name: Build Apache TVM

on:
  push:
    branches: 'main'
  schedule:
    - cron: "* 17 * * *"

permissions:
  contents: write

env:
  CUDA_VERSION: 12.9.0

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
    outputs:
      hash: ${{ steps.hash.outputs.HASH }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com

      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19

      - name: Retrieve hash
        id: hash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Install cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y gcc libtinfo-dev zlib1g-dev \
            build-essential libedit-dev libxml2-dev llvm-18-dev llvm-18-tools clang-18 libpolly-18-dev
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools pytest

      - name: Build zstd (PIC static)
        shell: bash
        run: |
          set -euxo pipefail
          git clone --depth 1 https://github.com/facebook/zstd.git
          make -C zstd clean
          make -C zstd ZSTD_LEGACY_SUPPORT=0 CFLAGS="-O2 -fPIC"
          sudo make -C zstd install PREFIX=/usr/local
          echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/zz-local.conf
          sudo ldconfig

      - name: Build TVM
        env:
          LIBRARY_PATH: /usr/local/lib:${{ env.LIBRARY_PATH }}
          CMAKE_LIBRARY_PATH: /usr/local/lib:${{ env.CMAKE_LIBRARY_PATH }}
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig:${{ env.PKG_CONFIG_PATH }}
        run: |
          uv pip install . --verbose \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='llvm-config-18'; -DLLVM_DIR=$(llvm-config-18 --cmakedir); -DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON"
          uv pip install 3rdparty/tvm-ffi/ --verbose

      - name: Show TVM info
        run: |
          uv run python -c "import tvm; print(tvm.__version__); print(tvm.support.describe()); print(tvm.support.libinfo())"

      - name: Run unittest
        run: |
          uv run pytest tests/python/all-platform-minimal-test

      - name: Build python package
        env:
          LIBRARY_PATH: /usr/local/lib:${{ env.LIBRARY_PATH }}
          CMAKE_LIBRARY_PATH: /usr/local/lib:${{ env.CMAKE_LIBRARY_PATH }}
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig:${{ env.PKG_CONFIG_PATH }}
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='llvm-config --link-static'; -DUSE_MLIR=ON; -DUSE_CUDA=ON; -DUSE_TENSORRT_CODEGEN=ON"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Check if TVM can be imported with wheels
        run: |
          uv pip install dist/tvm-*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          uv run python -c "import tvm; print(tvm.__version__); print(tvm.support.describe()); print(tvm.support.libinfo())"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'apache/tvm'
          submodules: recursive
          github-server-url: https://github.com

      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.19

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          brew install llvm
          uv venv && source .venv/bin/activate
          uv pip install -U pip numpy cmake ninja wheel cython build setuptools

      - name: Build python package
        run: |
          uv build --wheel . \
            --config-settings=cmake.args="-G Ninja; -DUSE_LLVM='$(brew --prefix llvm)/bin/llvm-config --link-static'; -DUSE_MLIR=ON; -DUSE_METAL=ON;"
          uv build --wheel 3rdparty/tvm-ffi/

      - name: Check if TVM can be imported
        run: |
          uv pip install dist/tvm-*.whl 3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl
          uv run python -c "import tvm; print(tvm.__version__)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-py${{ matrix.python-version }}
          path: |
            dist/tvm-*.whl
            3rdparty/tvm-ffi/dist/apache_tvm_ffi-*.whl

  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Compute tag meta (JST)
        id: meta
        shell: bash
        run: |
          TZ=Asia/Tokyo date +%Y-%m-%d > d.txt
          TZ=Asia/Tokyo date +%Y%m%d   > dc.txt
          echo "DATE_JST=$(cat d.txt)" >> $GITHUB_OUTPUT
          echo "DATE_JST_COMPACT=$(cat dc.txt)" >> $GITHUB_OUTPUT
      
          HASH="${{ needs.build-linux.outputs.hash }}"
          echo "FULL_SHA=$HASH"       >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${HASH:0:8}" >> $GITHUB_OUTPUT

      - name: Flatten & dedupe wheels
        shell: bash
        run: |
          mkdir -p upload
          # 同名ファイルは最初に見つかったものだけを採用（重複はスキップ）
          while IFS= read -r -d '' f; do
            bn="$(basename "$f")"
            if [[ -e "upload/$bn" ]]; then
              echo "skip duplicate: $bn"
            else
              cp "$f" "upload/$bn"
            fi
          done < <(find all-wheels -type f -name '*.whl' -print0)
      
          echo "Final upload set:"
          ls -al upload

      - uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (${{ steps.meta.outputs.DATE_JST }}) [tvm ${{ steps.meta.outputs.SHORT_SHA }}]
          tag_name: nightly-${{ steps.meta.outputs.DATE_JST_COMPACT }}-tvm-${{ steps.meta.outputs.SHORT_SHA }}
          body: |
            tvm: ${{ steps.meta.outputs.FULL_SHA }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Built (JST): ${{ steps.meta.outputs.DATE_JST }}
          files: |
            upload/*
          prerelease: true
          fail_on_unmatched_files: true

      - uses: softprops/action-gh-release@v2.3.3
        with:
          name: Apache TVM Nightly (latest)
          tag_name: nightly
          body: |
            tvm: ${{ steps.meta.outputs.FULL_SHA }}
            CUDA: ${{ env.CUDA_VERSION }} (Linux only)
            Latest build (JST): ${{ steps.meta.outputs.DATE_JST }}
          files: |
            upload/*
          prerelease: true
          fail_on_unmatched_files: true
